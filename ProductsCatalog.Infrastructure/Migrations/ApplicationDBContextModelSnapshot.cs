// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductsCatalog.Infrastructure.Data.Context;

#nullable disable

namespace ProductsCatalog.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "952625cb-623b-4f8e-a426-c9e14ffe41bc",
                            ConcurrencyStamp = "9e9ef764-d672-42d8-99ee-93c2410d8ae0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ea3206f7-8571-4e45-b209-e593236f3420",
                            ConcurrencyStamp = "df2d8409-cg61-4aac-ae65-b26fbbab77f2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e8d727d7-27c8-4a68-8987-c4a45a9070f4",
                            RoleId = "952625cb-623b-4f8e-a426-c9e14ffe41bc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductsCatalog.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e8d727d7-27c8-4a68-8987-c4a45a9070f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae92b2cd-ec9f-4f13-b75d-0832fa0d6169",
                            Email = "omar@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Omar",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "OMAR@GMAIL.COM",
                            NormalizedUserName = "OMAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENsgpWCwz7CtTKEL1jOWkHkofVaw4ZlJ96lBdyOITIIwaDyqEWqO4fjqJw7WqvP9nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a3a1b7b-9d80-435e-ac90-1ff6960d6e4c",
                            TwoFactorEnabled = false,
                            UserName = "omar@gmail.com"
                        });
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Books"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Clothing"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Home Appliances"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Sports Equipment"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Toys"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Furniture"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Beauty Products"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Stationery"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Groceries"
                        });
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 25, 3, 12, 3, 524, DateTimeKind.Local).AddTicks(3649));

                    b.Property<bool>("CurrentTimeFiltered")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("ImageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ImageID")
                        .IsUnique()
                        .HasFilter("[ImageID] IS NOT NULL");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2840),
                            CurrentTimeFiltered = false,
                            Description = "A high-tech smartphone with a powerful processor.",
                            Duration = 30,
                            Name = "Smartphone",
                            Price = 499.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2906)
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 1,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2922),
                            CurrentTimeFiltered = true,
                            Description = "A lightweight laptop for professionals.",
                            Duration = 60,
                            Name = "Laptop",
                            Price = 999.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2925)
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 1,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2931),
                            CurrentTimeFiltered = false,
                            Description = "Wireless headphones with noise cancellation.",
                            Duration = 45,
                            Name = "Headphones",
                            Price = 199.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2933)
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 2,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2938),
                            CurrentTimeFiltered = false,
                            Description = "A thrilling mystery novel.",
                            Duration = 30,
                            Name = "Mystery Novel",
                            Price = 19.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2941)
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 2,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2945),
                            CurrentTimeFiltered = true,
                            Description = "A comprehensive science textbook.",
                            Duration = 45,
                            Name = "Science Textbook",
                            Price = 49.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2948)
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 2,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2953),
                            CurrentTimeFiltered = false,
                            Description = "A cookbook with delicious recipes.",
                            Duration = 60,
                            Name = "Cookbook",
                            Price = 29.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2955)
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 3,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2960),
                            CurrentTimeFiltered = true,
                            Description = "A comfortable cotton T-shirt.",
                            Duration = 15,
                            Name = "T-shirt",
                            Price = 9.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2962)
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 3,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2968),
                            CurrentTimeFiltered = false,
                            Description = "Stylish and durable jeans.",
                            Duration = 45,
                            Name = "Jeans",
                            Price = 49.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2970)
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 3,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2975),
                            CurrentTimeFiltered = true,
                            Description = "A warm winter jacket.",
                            Duration = 60,
                            Name = "Jacket",
                            Price = 89.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2977)
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 4,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2982),
                            CurrentTimeFiltered = false,
                            Description = "A compact microwave oven.",
                            Duration = 30,
                            Name = "Microwave",
                            Price = 99.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2984)
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 4,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(2988),
                            CurrentTimeFiltered = false,
                            Description = "A powerful kitchen blender.",
                            Duration = 45,
                            Name = "Blender",
                            Price = 59.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3014)
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 4,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3023),
                            CurrentTimeFiltered = true,
                            Description = "Energy-efficient air conditioner.",
                            Duration = 60,
                            Name = "Air Conditioner",
                            Price = 299.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3027)
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 5,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3424),
                            CurrentTimeFiltered = false,
                            Description = "A high-quality football for matches.",
                            Duration = 30,
                            Name = "Football",
                            Price = 25.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3430)
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 5,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3439),
                            CurrentTimeFiltered = false,
                            Description = "Lightweight and durable tennis racket.",
                            Duration = 45,
                            Name = "Tennis Racket",
                            Price = 79.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3443)
                        },
                        new
                        {
                            ID = 15,
                            CategoryID = 5,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3450),
                            CurrentTimeFiltered = true,
                            Description = "A non-slip yoga mat for exercises.",
                            Duration = 60,
                            Name = "Yoga Mat",
                            Price = 19.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3453)
                        },
                        new
                        {
                            ID = 16,
                            CategoryID = 6,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3460),
                            CurrentTimeFiltered = false,
                            Description = "A collectible action figure for kids.",
                            Duration = 30,
                            Name = "Action Figure",
                            Price = 14.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3464)
                        },
                        new
                        {
                            ID = 17,
                            CategoryID = 6,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3471),
                            CurrentTimeFiltered = false,
                            Description = "A creative building block set.",
                            Duration = 45,
                            Name = "Lego Set",
                            Price = 49.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3475)
                        },
                        new
                        {
                            ID = 18,
                            CategoryID = 6,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3482),
                            CurrentTimeFiltered = true,
                            Description = "A fun and engaging family board game.",
                            Duration = 60,
                            Name = "Board Game",
                            Price = 29.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3485)
                        },
                        new
                        {
                            ID = 19,
                            CategoryID = 7,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3516),
                            CurrentTimeFiltered = false,
                            Description = "A wooden dining table for six.",
                            Duration = 30,
                            Name = "Dining Table",
                            Price = 299.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3521)
                        },
                        new
                        {
                            ID = 20,
                            CategoryID = 7,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3529),
                            CurrentTimeFiltered = false,
                            Description = "An ergonomic chair for office use.",
                            Duration = 45,
                            Name = "Office Chair",
                            Price = 149.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3533)
                        },
                        new
                        {
                            ID = 21,
                            CategoryID = 7,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3539),
                            CurrentTimeFiltered = true,
                            Description = "A spacious bookshelf for storage.",
                            Duration = 60,
                            Name = "Bookshelf",
                            Price = 89.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3542)
                        },
                        new
                        {
                            ID = 22,
                            CategoryID = 8,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3549),
                            CurrentTimeFiltered = false,
                            Description = "A long-lasting matte lipstick.",
                            Duration = 30,
                            Name = "Lipstick",
                            Price = 14.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3553)
                        },
                        new
                        {
                            ID = 23,
                            CategoryID = 8,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3559),
                            CurrentTimeFiltered = false,
                            Description = "A hydrating moisturizer for dry skin.",
                            Duration = 45,
                            Name = "Moisturizer",
                            Price = 24.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3563)
                        },
                        new
                        {
                            ID = 24,
                            CategoryID = 8,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3569),
                            CurrentTimeFiltered = true,
                            Description = "A refreshing fragrance for daily use.",
                            Duration = 60,
                            Name = "Perfume",
                            Price = 49.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3573)
                        },
                        new
                        {
                            ID = 25,
                            CategoryID = 9,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3579),
                            CurrentTimeFiltered = false,
                            Description = "A spiral notebook for taking notes.",
                            Duration = 30,
                            Name = "Notebook",
                            Price = 4.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3582)
                        },
                        new
                        {
                            ID = 26,
                            CategoryID = 9,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3587),
                            CurrentTimeFiltered = false,
                            Description = "A pack of 10 high-quality pens.",
                            Duration = 45,
                            Name = "Pen Set",
                            Price = 9.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3592)
                        },
                        new
                        {
                            ID = 27,
                            CategoryID = 9,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3623),
                            CurrentTimeFiltered = true,
                            Description = "An organizer planner for daily tasks.",
                            Duration = 60,
                            Name = "Planner",
                            Price = 14.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3626)
                        },
                        new
                        {
                            ID = 28,
                            CategoryID = 10,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3632),
                            CurrentTimeFiltered = false,
                            Description = "A 5kg pack of premium rice.",
                            Duration = 30,
                            Name = "Rice",
                            Price = 19.99m,
                            StartDate = new DateTime(2024, 12, 26, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3635)
                        },
                        new
                        {
                            ID = 29,
                            CategoryID = 10,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3642),
                            CurrentTimeFiltered = false,
                            Description = "A bottle of extra virgin olive oil.",
                            Duration = 45,
                            Name = "Olive Oil",
                            Price = 9.99m,
                            StartDate = new DateTime(2024, 12, 27, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3645)
                        },
                        new
                        {
                            ID = 30,
                            CategoryID = 10,
                            CreatedOn = new DateTime(2024, 12, 25, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3652),
                            CurrentTimeFiltered = true,
                            Description = "A 1kg pack of Arabica coffee beans.",
                            Duration = 60,
                            Name = "Coffee Beans",
                            Price = 14.99m,
                            StartDate = new DateTime(2024, 12, 28, 3, 12, 3, 527, DateTimeKind.Local).AddTicks(3656)
                        });
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("FileSize")
                        .HasMaxLength(1048576)
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductsImages", (string)null);
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.ProductUpdateLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 25, 3, 12, 3, 531, DateTimeKind.Local).AddTicks(5425));

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UpdatedByID");

                    b.ToTable("ProductUpdateLogs", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProductsCatalog.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProductsCatalog.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductsCatalog.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProductsCatalog.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.Product", b =>
                {
                    b.HasOne("ProductsCatalog.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProductsCatalog.Domain.ApplicationUser", "CreatedBy")
                        .WithMany("Products")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProductsCatalog.Domain.Entities.ProductImage", "Image")
                        .WithOne("Product")
                        .HasForeignKey("ProductsCatalog.Domain.Entities.Product", "ImageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.ProductUpdateLog", b =>
                {
                    b.HasOne("ProductsCatalog.Domain.Entities.Product", "Product")
                        .WithMany("ProductUpdateLogs")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProductsCatalog.Domain.ApplicationUser", "UpdatedBy")
                        .WithMany("productUpdateLogs")
                        .HasForeignKey("UpdatedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProductsCatalog.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("productUpdateLogs");
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductUpdateLogs");
                });

            modelBuilder.Entity("ProductsCatalog.Domain.Entities.ProductImage", b =>
                {
                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
